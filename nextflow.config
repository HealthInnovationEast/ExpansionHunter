// Please do not change the order of the numbered sections!
// The expected order is: 1. Parameters - 2. Profiles - 3. Process -  4. Executor
// There is a high chance it would break the configuration of 'profiles'

manifest {
    name            = 'cynapse-ccri/ExpansionHunter'
    homePage        = 'https://github.com/cynapse-ccri/ExpansionHunter'
    description     = 'Nextflow implementation of Illumina/ExpansionHunter (multi-sample)'
    mainScript      = 'main.nf'
    version         = '1.1.2'
}

// 1. Parameters

// NOTE:
// Initialise the values of the params to the preferred default value or to false
params {
    // output folder options
    outdir          = 'results'
    tracedir        = "${params.outdir}/pipeline_info"

    // client-specific variables to be used in pipeline introspection reporting
    raci_owner      = "NA"
    domain_keywords = "NA"

    // required inputs
    sample_info             = null
    reference               = null
    variant_catalog         = null
    // optional - set to defaults (from original code base)
    region_extension_length = 1000
    aligner                 = 'dag-aligner'
    analysis_mode           = 'streaming'
    augment                 = false

    // report_dir is:
    // - the folder from the container that includes the scripts for NF <= v20.01 (bin)
    // - the ${projectDir}/bin folder of the root of the repo with the scripts for NF >= v20.10
    report_dir = '/opt/bin/'

    // when set to true, prints help and exits
    help = false

    // default container for all processes, excluding those defined differently via the usage with 'withName'
    container = 'quay.io/lifebitai/ubuntu:18.10'
    augment_container = 'quay.io/cynapse-ccri/expansionhunter:1.1.2'

    // process resources defaults
    cpus   = 16
    memory = 3.5.GB
    time   = '4h'

    // max resources limits defaults
    max_cpus   = 16
    max_memory = 192.GB
    max_time   = 24.h
    queue      = false

    // execution related defaults
    config        = 'conf/standard.config'
    echo          = false
    errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'terminate' }
    maxRetries    = 9
    maxForks      = 200
    queueSize     = 200
    executor      = 'awsbatch'
}

// 2. Profiles


// Do not update the order because the values set in params scope will not be overwritten
// Do not attempt to simplify to
// includeConfig params.config
// outside of profiles scope, it will fail to update the values of the params
profiles {
    standard {includeConfig params.config}
    docker { docker.enabled = true }
    base {includeConfig 'conf/base.config'}
    test {includeConfig 'conf/test.config'} // must be before singularity
    local {includeConfig 'conf/test.config'}
    singularity {includeConfig 'conf/singularity.config'}
    slurm {includeConfig 'conf/slurm.config'}
}

// 3. Process

// Do not change order of block, must follow after profiles scope (last section that updates params)
process {
    echo          = params.echo
    cpus          = params.cpus
    memory        = params.memory
    time          = params.time
    maxRetries    = params.maxRetries
    maxForks      = params.maxForks
    container     = params.container
    errorStrategy = params.errorStrategy
    queue         = params.queue

    withName: obtain_pipeline_metadata {
        cpus   = 1
        memory = 500.MB
        time   = '10m'
    }

    withName: expansion_hunter {
        container = 'quay.io/wtsicgp/expansion_hunter:5.0.0'
        // cpus   = { workflow.stubRun ? 1 : resource_max(params.cpus) }
        // memory = { workflow.stubRun ? 1.GB : resource_max(task.cpus * params.memory * task.attempt) }
        cpus   = { resource_max(params.cpus, null) }
        memory = { memory_max(params.memory, task.cpus * task.attempt, null) }
        time   = params.time
    }

    withName: sort_n_index {
        container = 'quay.io/wtsicgp/expansion_hunter:5.0.0'
        // cpus   = { workflow.stubRun ? 1 : resource_max(params.cpus) }
        // memory = { workflow.stubRun ? 1.GB : resource_max(task.cpus * params.memory * task.attempt) }
        cpus   = { cpu_max(params.cpus, 1, 4) } // caps at 4cpus
        memory = { memory_max(params.memory, task.cpus * task.attempt, null) }
        time   = params.time
    }

    withName: augment {
        container = params.augment_container
        // cpus   = { workflow.stubRun ? 1 : resource_max(params.cpus) }
        // memory = { workflow.stubRun ? 1.GB : resource_max(task.cpus * params.memory * task.attempt) }
        cpus   = { cpu_max(params.cpus, 1, 4) } // caps at 4cpus
        memory = { memory_max(params.memory, task.cpus * task.attempt, null) }
        time   = params.time
    }
}

// 4. Executor - Do not remove this section! Required for running with different executors using --executor parameter

executor {
    name      = params.executor
    queueSize = params.queueSize
}

// 5. Nextflow timeline, report and trace reports

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.tracedir}/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.tracedir}/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    fields  = 'task_id,native_id,process,name,tag,status,exit,cpus,%cpu,memory,%mem,rss,vmem,peak_rss,peak_rss,container'
    file    = "${params.tracedir}/execution_trace_${trace_timestamp}.txt"
}

def memory_max(nextflow.util.MemoryUnit obj_in, int multiplier, nextflow.util.MemoryUnit alt_max) {
    new_mem = (nextflow.util.MemoryUnit) obj_in * multiplier
    max = alt_max == null ? (nextflow.util.MemoryUnit) params.max_memory : alt_max
    if (nextflow.util.MemoryUnit.compareTo(max, new_mem) < 0) {
        return max as nextflow.util.MemoryUnit
    }
    return new_mem as nextflow.util.MemoryUnit
}

def cpu_max(int obj_in, int multiplier, int alt_max) {
    new_cpus =  obj_in * multiplier
    max = alt_max == null ? params.max_cpus : alt_max
    if (max < new_cpus) {
        return max
    }
    return new_cpus
}
